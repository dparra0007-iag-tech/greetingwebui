image: iaghcp-docker-technical-architecture.jfrog.io/docker:1.0.0

services:
  - name: iaghcp-docker-technical-architecture.jfrog.io/docker-dind:1.0.0
    alias: docker

stages:
- build code
- test code
- build image
- test image
- deploy

variables:
  IMAGE_NAME: greentingwebui
  GITLAB_SERVICE_REGISTRY: registry.gitlab.com/iag-dev/glp/greentingwebui/$IMAGE_NAME

build_code:
  stage: build code
  image: iaghcp-docker-technical-architecture.jfrog.io/golang:1.8
  script:
    - env GOOS=linux GOARCH=amd64 go build -o ./gofrontend/ToUpload/app ./gofrontend/app.go
  artifacts:
    paths:
      - ./gofrontend/ToUpload/app

#unit_integration_test_code:
#  stage: test code
#  image: microsoft/aspnetcore-build:1.1
#  script:
#    - dotnet restore ./todoapi/todoapi.unittest
#    - dotnet test ./todoapi/todoapi.unittest/todoapi.unittest.csproj
#  except:
#    - triggers

#static_test_service:
#  stage: test code
#  script:
#    - docker run --rm -v $(pwd):/data -w /data dparra0007/sonar-scanner:20171010-1 sonar-scanner
#     -Dsonar.projectKey=$CI_PROJECT_NAMESPACE:$CI_PROJECT_NAME 
#     -Dsonar.projectName=$CI_PROJECT_NAME 
#     -Dsonar.branch=$CI_COMMIT_REF_NAME 
#     -Dsonar.projectVersion=$CI_JOB_ID 
#     -Dsonar.sources=./greetingapi/src 
#     -Dsonar.java.binaries=./greetingapi/target 
#     -Dsonar.gitlab.project_id=$CI_PROJECT_ID 
#     -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA 
#     -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
#  except:
#    - triggers

#packer build -var "version=local-1" -var "access_key=AKIAIX3DNBYFKAC3H4QA" -var "secret_key=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" template.packer
build_service:
  stage: build image
  image: iaghcp-docker-technical-architecture.jfrog.io/packer:1.0.0
  script:
    - cd ./gofrontend
    - rm -Rf /home/gitlab-runner/VirtualBox\ VMs/
    - packer build -only="docker"
     -var "version=$CI_PIPELINE_ID" 
     -var "access_key=${AWS_CREDENTIAL_ACCESS_KEY_ID}" 
     -var "secret_key=${AWS_CREDENTIAL_SECRET_ACCESS_KEY}" template.packer
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - cat middletier.tar | docker import - $GITLAB_SERVICE_REGISTRY
    - docker tag $GITLAB_SERVICE_REGISTRY $GITLAB_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
    - docker push $GITLAB_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
  dependencies:
    - build_code
  tags:
    - iaas

#functional_test_service:
#  stage: test image
#  image: iaghcp-docker-technical-architecture.jfrog.io/docker-serverless:1.0.0
#  before_script:
#    - export AWS_ACCESS_KEY_ID=${AWS_CREDENTIAL_ACCESS_KEY_ID} 
#    - export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIAL_SECRET_ACCESS_KEY}
#    - export AWS_DEFAULT_REGION="us-west-2"
#  script:
#    - cp ./aws.template ./aws-$CI_PIPELINE_ID-$CI_JOB_ID.template
#    - aws s3 cp ./aws-$CI_PIPELINE_ID-$CI_JOB_ID.template s3://glp-workspace-gitlab-ci/
#    - AMI="$(aws ec2 describe-images --filters Name=tag-key,Values=version Name=tag-value,Values=$CI_PIPELINE_ID --query 'Images[*].{ID:ImageId}' --output text)"
#    - aws cloudformation deploy --template-file ./aws-$CI_PIPELINE_ID-$CI_JOB_ID.template --stack-name $CI_PROJECT_NAME --parameter-overrides 'InstanceType=t2.micro' 'KeyName=MiddleTier' "AMI=$AMI"
#    
#    - PUBLIC_IP="$(aws ec2 describe-instances --filters "Name=tag-key,Values=aws:cloudformation:stack-name" | jq ".Reservations[0].Instances[0].PublicIpAddress" | tr -d \")"
#    - sed -i -e "s/{{PUBLIC_IP}}/$PUBLIC_IP/g" ./gofrontend-functional-test/config/default.json
#
#    - cd ./gofrontend-functional-test
#    - wget --header="X-Api-Key:${POSTMAN_API_KEY}" -O ./testsuites/test.postman_collection.json https://api.getpostman.com/collections/651996-1113039f-c221-489a-a9aa-a01df5dafc61
#    - npm install --save https://github.com/dparra0007/newman-reporter-winston/tarball/master
#    - npm install
#    - serverless deploy -v
#    - serverless invoke -f run-newman-test
#    - cd ..

#    - aws cloudformation delete-stack --stack-name $CI_PROJECT_NAME
#  when: manual

#docker run -d -it middletier:latest /bin/bash -c "sudo service supervisor start && sudo service nginx start && bash"
#deploy_staging:
#  stage: deploy
#  image: infrastructureascode/aws-cli:1.14.14
#  before_script:
#    - export AWS_ACCESS_KEY_ID=${AWS_CREDENTIAL_ACCESS_KEY_ID} 
#    - export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIAL_SECRET_ACCESS_KEY}
#    - export AWS_DEFAULT_REGION="us-west-2"
#  script:
#    - cp ./aws.template ./aws-$CI_PIPELINE_ID-$CI_JOB_ID.template
#    - aws s3 cp ./aws-$CI_PIPELINE_ID-$CI_JOB_ID.template s3://glp-workspace-gitlab-ci/
#    - AMI="$(aws ec2 describe-images --filters Name=tag-key,Values=version Name=tag-value,Values=$CI_PIPELINE_ID --query 'Images[*].{ID:ImageId}' --output text)"
#    - aws cloudformation deploy --template-file ./aws-$CI_PIPELINE_ID-$CI_JOB_ID.template --stack-name $CI_PROJECT_NAME --parameter-overrides 'InstanceType=t2.micro' 'KeyName=MiddleTier' "AMI=$AMI"
#  environment:
#    name: staging
#  when: manual