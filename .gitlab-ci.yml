image: dparra0007/docker:451

services:
  - name: dparra0007/docker-dind:421
    alias: docker

stages:
- build code
- test code
- build image
- test image
- deploy

build_code:
  stage: build code
  image: golang:1.8
  script:
    - env GOOS=linux GOARCH=amd64 go build -o ./gofrontend/ToUpload/app ./gofrontend/app.go
  artifacts:
    paths:
      - ./gofrontend/ToUpload/app

#unit_integration_test_code:
#  stage: test code
#  image: microsoft/aspnetcore-build:1.1
#  script:
#    - dotnet restore ./todoapi/todoapi.unittest
#    - dotnet test ./todoapi/todoapi.unittest/todoapi.unittest.csproj
#  except:
#    - triggers

#static_test_service:
#  stage: test code
#  script:
#    - docker run --rm -v $(pwd):/data -w /data dparra0007/sonar-scanner:20171010-1 sonar-scanner
#     -Dsonar.projectKey=$CI_PROJECT_NAMESPACE:$CI_PROJECT_NAME 
#     -Dsonar.projectName=$CI_PROJECT_NAME 
#     -Dsonar.branch=$CI_COMMIT_REF_NAME 
#     -Dsonar.projectVersion=$CI_JOB_ID 
#     -Dsonar.sources=./greetingapi/src 
#     -Dsonar.java.binaries=./greetingapi/target 
#     -Dsonar.gitlab.project_id=$CI_PROJECT_ID 
#     -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA 
#     -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
#  except:
#    - triggers

build_service:
  stage: build image
  image: dparra0007/packer:20171221-2
  script:
    - cd ./gofrontend
    - packer build
     -var "version=$CI_COMMIT_SHA" 
     -var "access_key=${AWS_CREDENTIAL_ACCESS_KEY_ID}" 
     -var "secret_key=${AWS_CREDENTIAL_SECRET_ACCESS_KEY}" template.packer
  dependencies:
    - build_code
  tags:
    - iaas

#functional_test_service:
#  stage: test docker
#  before_script:
#    - apk update
#    - apk upgrade
#    - apk add python python-dev py-pip build-base
#    - curl -L https://github.com/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
#    - chmod +x /usr/local/bin/docker-compose
#    - pip install docker-compose
#  script:
#    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#    - export TAG=$CI_COMMIT_REF_NAME 
#    - docker-compose -f docker-compose.functional.test.yml up -d
#    - sleep 10s
#    - docker logs $(docker ps -a --filter ancestor=dparra0007/newman:20170712-4 --format "{{.ID}}")
#  after_script:
#    - docker stop $(docker ps -a --filter status=running --format "{{.ID}}") > /dev/null
#    - docker rm $(docker ps -a -q) -f > /dev/null
#    - docker rmi $(docker images -q) -f > /dev/null || true
#  when: manual
#  only:
#    - master
#  except:
#    - triggers

#performance_test_service:
#  stage: test docker
#  before_script:
#    - apk update
#    - apk upgrade
#    - apk add python python-dev py-pip build-base
#    - curl -L https://github.com/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
#    - chmod +x /usr/local/bin/docker-compose
#    - pip install docker-compose
#  script:
#    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#    - export TAG=$CI_COMMIT_REF_NAME 
#    - docker-compose -f docker-compose.performance.test.yml up -d
#    - sleep 90s
#    - docker logs $(docker ps -a --filter ancestor=buildpack-deps:curl --format "{{.ID}}")
#  after_script:
#    - docker stop $(docker ps -a --filter status=running --format "{{.ID}}") > /dev/null
#    - docker rm $(docker ps -a -q) -f > /dev/null
#    - docker rmi $(docker images -q) -f > /dev/null || true
#  when: manual
#  only:
#    - master
#  except:
#    - triggers

#capacity_test_service:
#  stage: test docker
#  image: microsoft/aspnetcore-build:1.1
#  script:
#    - echo "Deploy to capacity testing env and execute automatic testing"
#  - /usr/local/bin/oc login ${OC_URL} --token=${OC_TOKEN}
#  - /usr/local/bin/oc project todoapi || /usr/local/bin/oc new-project todoapi
#  when: manual
#  only:
#    - master
#  except:
#    - triggers

deploy_staging:
  stage: deploy
  image: infrastructureascode/aws-cli:1.14.14
  before_script:
    - export AWS_ACCESS_KEY_ID=${AWS_CREDENTIAL_ACCESS_KEY_ID} 
    - export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIAL_SECRET_ACCESS_KEY}
    - export AWS_DEFAULT_REGION="us-west-2"
  script:
    - cp ./aws.template ./aws-$CI_PIPELINE_ID-$CI_JOB_ID.template
    - aws s3 cp ./aws-$CI_PIPELINE_ID-$CI_JOB_ID.template s3://workspace-gitlab-ci/
    - AMI="$(aws ec2 describe-images --filters Name=tag-key,Values=version Name=tag-value,Values=$CI_COMMIT_SHA --query 'Images[*].{ID:ImageId}' --output text)"
    - aws cloudformation deploy --template-file ./aws-$CI_PIPELINE_ID-$CI_JOB_ID.template --stack-name $CI_PROJECT_NAME --parameter-overrides 'InstanceType=t2.micro' 'KeyName=MiddleTier' "AMI=$AMI"
  environment:
    name: staging
  when: manual
  tags:
    - iaas