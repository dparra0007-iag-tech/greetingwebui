image: iaghcp-docker-technical-architecture.jfrog.io/docker:1.0.0

services:
  - name: iaghcp-docker-technical-architecture.jfrog.io/docker-dind:1.0.0
    alias: docker

stages:
- build code
- test code
- build application
- test application
- push binaries
- deploy application

variables:
  IMAGE_NAME: greetingwebui
  URL_GLP_REGISTRY: https://iaghcp.jfrog.io/iaghcp/api/docker/docker-glp/v2/$IMAGE_NAME
  GLP_REGISTRY: iaghcp-docker-glp.jfrog.io
  CONTAINER_SERVICE_IMAGE: $GLP_REGISTRY/greetingwebui/$IMAGE_NAME
  BUILD_NAME: $CI_PROJECT_NAME
  GITLAB_SERVICE_REGISTRY: registry.gitlab.com/iag-dev/glp/greetingwebui/$IMAGE_NAME

build_code:
  stage: build code
  image: iaghcp-docker-technical-architecture.jfrog.io/golang:1.8
  script:
    - env GOOS=linux GOARCH=amd64 go build -o ./gofrontend/ToUpload/app ./gofrontend/app.go
  artifacts:
    paths:
      - ./gofrontend/ToUpload/app

#unit_integration_test_code:
#  stage: test code
#  image: microsoft/aspnetcore-build:1.1
#  script:
#    - dotnet restore ./todoapi/todoapi.unittest
#    - dotnet test ./todoapi/todoapi.unittest/todoapi.unittest.csproj
#  except:
#    - triggers

#static_test_service:
#  stage: test code
#  script:
#    - docker run --rm -v $(pwd):/data -w /data dparra0007/sonar-scanner:20171010-1 sonar-scanner
#     -Dsonar.projectKey=$CI_PROJECT_NAMESPACE:$CI_PROJECT_NAME 
#     -Dsonar.projectName=$CI_PROJECT_NAME 
#     -Dsonar.branch=$CI_COMMIT_REF_NAME 
#     -Dsonar.projectVersion=$CI_JOB_ID 
#     -Dsonar.sources=./greetingapi/src 
#     -Dsonar.java.binaries=./greetingapi/target 
#     -Dsonar.gitlab.project_id=$CI_PROJECT_ID 
#     -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA 
#     -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
#  except:
#    - triggers

#packer build -var "version=local-1" -var "access_key=AKIAIX3DNBYFKAC3H4QA" -var "secret_key=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" template.packer
build_service:
  stage: build application
  image: iaghcp-docker-technical-architecture.jfrog.io/packer:1.0.0
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - cd ./gofrontend
    - rm -Rf /home/gitlab-runner/VirtualBox\ VMs/
    - packer build -only="docker"
     -var "version=$CI_PIPELINE_ID" 
     -var "access_key=${AWS_CREDENTIAL_ACCESS_KEY_ID}" 
     -var "secret_key=${AWS_CREDENTIAL_SECRET_ACCESS_KEY}" 
     -var "image_name=$GITLAB_SERVICE_REGISTRY" 
     -var="image_tag=$CI_COMMIT_REF_NAME" template.packer
    #- docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    #- cat middletier.tar | docker import - $GITLAB_SERVICE_REGISTRY
    #- docker tag $GITLAB_SERVICE_REGISTRY $GITLAB_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
    - docker push $GITLAB_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
  dependencies:
    - build_code
  tags:
    - iaas

#functional_test_service:
#  stage: test application
#  image: iaghcp-docker-technical-architecture.jfrog.io/docker-serverless:1.0.0
#  before_script:
#    - export AWS_ACCESS_KEY_ID=${AWS_CREDENTIAL_ACCESS_KEY_ID} 
#    - export AWS_SECRET_ACCESS_KEY=${AWS_CREDENTIAL_SECRET_ACCESS_KEY}
#    - export AWS_DEFAULT_REGION="us-west-2"
#  script:
#    - cp ./aws.template ./aws-$CI_PIPELINE_ID-$CI_JOB_ID.template
#    - aws s3 cp ./aws-$CI_PIPELINE_ID-$CI_JOB_ID.template s3://glp-workspace-gitlab-ci/
#    - AMI="$(aws ec2 describe-images --filters Name=tag-key,Values=version Name=tag-value,Values=$CI_PIPELINE_ID --query 'Images[*].{ID:ImageId}' --output text)"
#    - aws cloudformation deploy --template-file ./aws-$CI_PIPELINE_ID-$CI_JOB_ID.template --stack-name $CI_PROJECT_NAME --parameter-overrides 'InstanceType=t2.micro' 'KeyName=MiddleTier' "AMI=$AMI"
#    
#    - PUBLIC_IP="$(aws ec2 describe-instances --filters "Name=tag-key,Values=aws:cloudformation:stack-name" | jq ".Reservations[0].Instances[0].PublicIpAddress" | tr -d \")"
#    - sed -i -e "s/{{PUBLIC_IP}}/$PUBLIC_IP/g" ./gofrontend-functional-test/config/default.json
#
#    - cd ./gofrontend-functional-test
#    - wget --header="X-Api-Key:${POSTMAN_API_KEY}" -O ./testsuites/test.postman_collection.json https://api.getpostman.com/collections/651996-1113039f-c221-489a-a9aa-a01df5dafc61
#    - npm install --save https://github.com/dparra0007/newman-reporter-winston/tarball/master
#    - npm install
#    - serverless deploy -v
#    - serverless invoke -f run-newman-test
#    - cd ..

#    - aws cloudformation delete-stack --stack-name $CI_PROJECT_NAME
#  when: manual

push_service_binaries:
  stage: push binaries
  tags:
    - docker-push
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker pull $GITLAB_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
    - docker tag $GITLAB_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME $CONTAINER_SERVICE_IMAGE
    - make push ARTIFACTORY_URL=$ARTIFACTORY_URL ARTIFACTORY_USER=$ARTIFACTORY_USER ARTIFACTORY_PASS=$ARTIFACTORY_PASS CONTAINER_SERVICE_IMAGE=$CONTAINER_SERVICE_IMAGE DOCKER_REPO_KEY=$DOCKER_REPO_KEY BUILD_NAME=$BUILD_NAME CI_PIPELINE_ID=$CI_PIPELINE_ID URL_GLP_REGISTRY=$URL_GLP_REGISTRY

deploy_staging:
  stage: deploy application
  variables:
    OC_URL: $OC_URL_STG
    OC_TOKEN: $OC_TOKEN_STG
    TAG_GLOBALCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/stg\/env.sh'
    TAG_SYSTEMCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/greetingwebui-stg\/env.sh'
  before_script:
    - sed -i -e "s/{{TAG_SERVICE}}/$CI_PIPELINE_ID/g" deployment.yml
    - sed -i -e "s/{{TAG_DB}}/$CI_PIPELINE_ID/g" deployment.yml
    - sed -i -e "s/{{TAG_GLOBALCONF}}/$TAG_GLOBALCONF/g" deployment.yml
    - sed -i -e "s/{{TAG_SYSTEMCONF}}/$TAG_SYSTEMCONF/g" deployment.yml
    - oc login $OC_URL_STG --token $OC_TOKEN_STG --insecure-skip-tls-verify
  script:
    - oc project ocp01-greetingwebui-stg
    - oc create --filename=deployment.yml
#    - oc autoscale dc/greetingapi --min 1 --max 3 --cpu-percent=50
    - oc expose service greetingwebui
  artifacts:
    paths:
      - ./deployment.yml
  environment:
    name: staging
    url: http://greetingwebui-apigateway-ocp01-greetingwebui-stg.apps.ocp01.hcp.iairgroup.com/greetingwebui/
  when: manual

deploy_production:
  stage: deploy application
  variables:
    OC_URL: $OC_URL_PRO
    OC_TOKEN: $OC_TOKEN_PRO
    TAG_GLOBALCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/stg\/env.sh'
    TAG_SYSTEMCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/greetingwebui\/env.sh'
  before_script:
    - sed -i -e "s/{{TAG_SERVICE}}/$CI_PIPELINE_ID/g" deployment.yml
    - sed -i -e "s/{{TAG_DB}}/$CI_PIPELINE_ID/g" deployment.yml
    - sed -i -e "s/{{TAG_GLOBALCONF}}/$TAG_GLOBALCONF/g" deployment.yml
    - sed -i -e "s/{{TAG_SYSTEMCONF}}/$TAG_SYSTEMCONF/g" deployment.yml
    - oc login $OC_URL_PRO --token $OC_TOKEN_PRO --insecure-skip-tls-verify
  script:
    - oc new-project $(echo $CI_PROJECT_NAME | tr '[:upper:]' '[:lower:]')
    - oc adm policy add-scc-to-user privileged -z default -n $(echo $CI_PROJECT_NAME | tr '[:upper:]' '[:lower:]')
    - oc adm policy add-scc-to-user anyuid -z default -n $(echo $CI_PROJECT_NAME | tr '[:upper:]' '[:lower:]')
    - oc create --filename=deployment.yml
#    - oc autoscale dc/greetingapi --min 1 --max 3 --cpu-percent=50
    - oc expose service greetingwebui
  artifacts:
    paths:
      - ./deployment.yml
  environment:
    name: production
    url: http://greetingapi-w53-greetingapi.dit-iaggs.com/greetingwebui/
  when: manual
  except:
    - triggers
